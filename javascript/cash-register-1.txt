function checkCashRegister(price, cash, cid) {
  //setup
  const denom = [
  
      {name: 'ONE HUNDRED' , value: 100},
      {name: 'TWENTY', value: 20},
      {name: 'TEN', value: 10},
      {name: 'FIVE', value: 5},
      {name: 'ONE', value: 1},
      {name: 'QUARTER', value: 0.25},
      {name: 'DIME', value: 0.1},
      {name: 'NICKEL', value: 0.05},
      {name: 'PENNY', value: 0.01}
    
  ]

  let change = cash - price
  let workingCid = [...cid].reverse()
  let result = []
  let sumInDrawer = workingCid.map(
    function(curr, index, array) {
      return curr[1]
    }
  ).reduce(
    function(acc, curr, index, array) {
      return acc + curr
    }
  )
  if (sumInDrawer === change) {
    return {status: 'CLOSED', change: [...cid]}
  } else if (sumInDrawer < change) {
    return {status: 'INSUFFICIENT_FUNDS', change: []}
  }
  //find largest, if change is 25, largest value is [TWENTY, 20]
  let values = Object.keys(denom).map(
                  function(key, index) {
                    return denom[key].value
                  }
               ) //[ 100, 20, 10, 5, 1, 0.25, 0.1, 0.05, 0.01 ]
  let indexOfLargest = values.findIndex(value => value < change)

  for (let i = indexOfLargest; i < values.length; i++) {
      if (workingCid[i][1] < change && change > 0) {
        result.push([...workingCid[i]])
        change = Number.parseFloat(change - workingCid[i][1]).toFixed(2)
        workingCid[i][1] = 0
      } else if (workingCid[i][1] > change && change > 0 && workingCid[i][1] !== 0) {
        if ((change - change % values[i]) !== 0) {
          result.push(
          [workingCid[i][0], change - change % values[i]]
          )
        }
        change = Number.parseFloat(change % values[i]).toFixed(2)
      }
  }

  let finalSum = result.map(
    function(curr, index, array) {
      return curr[1]
    }
  ).reduce(
    function(acc, curr, index, array) {
      return acc + curr
    }
  )

  //final sum is less than change
  if (finalSum < change) {
    return {status: 'INSUFFICIENT_FUNDS', change: []}
  } 

  //there is sufficient amount of change
  return {status: "OPEN", change: result};
}

checkCashRegister(19.5, 20, [["PENNY", 0.01], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 1], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]])

// Shift+Option+A - Toggle block comment
// functions don't work in template literals for example ${acc.match(/abc/)}
// a collection of what works what doesn't, things I find
// Shift+CMD+K - Delete line
